// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: codesand.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodeSandService_ExecuteCode_FullMethodName = "/CodeSandService/executeCode"
)

// CodeSandServiceClient is the client API for CodeSandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeSandServiceClient interface {
	ExecuteCode(ctx context.Context, in *ExecuteCodeRequest, opts ...grpc.CallOption) (*ExecuteCodeResponse, error)
}

type codeSandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeSandServiceClient(cc grpc.ClientConnInterface) CodeSandServiceClient {
	return &codeSandServiceClient{cc}
}

func (c *codeSandServiceClient) ExecuteCode(ctx context.Context, in *ExecuteCodeRequest, opts ...grpc.CallOption) (*ExecuteCodeResponse, error) {
	out := new(ExecuteCodeResponse)
	err := c.cc.Invoke(ctx, CodeSandService_ExecuteCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeSandServiceServer is the server API for CodeSandService service.
// All implementations must embed UnimplementedCodeSandServiceServer
// for forward compatibility
type CodeSandServiceServer interface {
	ExecuteCode(context.Context, *ExecuteCodeRequest) (*ExecuteCodeResponse, error)
	mustEmbedUnimplementedCodeSandServiceServer()
}

// UnimplementedCodeSandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCodeSandServiceServer struct {
}

func (UnimplementedCodeSandServiceServer) ExecuteCode(context.Context, *ExecuteCodeRequest) (*ExecuteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCode not implemented")
}
func (UnimplementedCodeSandServiceServer) mustEmbedUnimplementedCodeSandServiceServer() {}

// UnsafeCodeSandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeSandServiceServer will
// result in compilation errors.
type UnsafeCodeSandServiceServer interface {
	mustEmbedUnimplementedCodeSandServiceServer()
}

func RegisterCodeSandServiceServer(s grpc.ServiceRegistrar, srv CodeSandServiceServer) {
	s.RegisterService(&CodeSandService_ServiceDesc, srv)
}

func _CodeSandService_ExecuteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeSandServiceServer).ExecuteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeSandService_ExecuteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeSandServiceServer).ExecuteCode(ctx, req.(*ExecuteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeSandService_ServiceDesc is the grpc.ServiceDesc for CodeSandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeSandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CodeSandService",
	HandlerType: (*CodeSandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "executeCode",
			Handler:    _CodeSandService_ExecuteCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codesand.proto",
}
