// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: questionsubmit.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuestionSubmitService_DoQuestionSubmit_FullMethodName         = "/QuestionSubmitService/DoQuestionSubmit"
	QuestionSubmitService_ListQuestionSubmitByPage_FullMethodName = "/QuestionSubmitService/ListQuestionSubmitByPage"
)

// QuestionSubmitServiceClient is the client API for QuestionSubmitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionSubmitServiceClient interface {
	DoQuestionSubmit(ctx context.Context, in *QuestionSubmitAddRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	ListQuestionSubmitByPage(ctx context.Context, in *QuestionSubmitQueryRequest, opts ...grpc.CallOption) (*QuestionSubmitQueryResponse, error)
}

type questionSubmitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionSubmitServiceClient(cc grpc.ClientConnInterface) QuestionSubmitServiceClient {
	return &questionSubmitServiceClient{cc}
}

func (c *questionSubmitServiceClient) DoQuestionSubmit(ctx context.Context, in *QuestionSubmitAddRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, QuestionSubmitService_DoQuestionSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionSubmitServiceClient) ListQuestionSubmitByPage(ctx context.Context, in *QuestionSubmitQueryRequest, opts ...grpc.CallOption) (*QuestionSubmitQueryResponse, error) {
	out := new(QuestionSubmitQueryResponse)
	err := c.cc.Invoke(ctx, QuestionSubmitService_ListQuestionSubmitByPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionSubmitServiceServer is the server API for QuestionSubmitService service.
// All implementations must embed UnimplementedQuestionSubmitServiceServer
// for forward compatibility
type QuestionSubmitServiceServer interface {
	DoQuestionSubmit(context.Context, *QuestionSubmitAddRequest) (*BoolResponse, error)
	ListQuestionSubmitByPage(context.Context, *QuestionSubmitQueryRequest) (*QuestionSubmitQueryResponse, error)
	mustEmbedUnimplementedQuestionSubmitServiceServer()
}

// UnimplementedQuestionSubmitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionSubmitServiceServer struct {
}

func (UnimplementedQuestionSubmitServiceServer) DoQuestionSubmit(context.Context, *QuestionSubmitAddRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoQuestionSubmit not implemented")
}
func (UnimplementedQuestionSubmitServiceServer) ListQuestionSubmitByPage(context.Context, *QuestionSubmitQueryRequest) (*QuestionSubmitQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestionSubmitByPage not implemented")
}
func (UnimplementedQuestionSubmitServiceServer) mustEmbedUnimplementedQuestionSubmitServiceServer() {}

// UnsafeQuestionSubmitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionSubmitServiceServer will
// result in compilation errors.
type UnsafeQuestionSubmitServiceServer interface {
	mustEmbedUnimplementedQuestionSubmitServiceServer()
}

func RegisterQuestionSubmitServiceServer(s grpc.ServiceRegistrar, srv QuestionSubmitServiceServer) {
	s.RegisterService(&QuestionSubmitService_ServiceDesc, srv)
}

func _QuestionSubmitService_DoQuestionSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSubmitAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionSubmitServiceServer).DoQuestionSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionSubmitService_DoQuestionSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionSubmitServiceServer).DoQuestionSubmit(ctx, req.(*QuestionSubmitAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionSubmitService_ListQuestionSubmitByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSubmitQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionSubmitServiceServer).ListQuestionSubmitByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionSubmitService_ListQuestionSubmitByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionSubmitServiceServer).ListQuestionSubmitByPage(ctx, req.(*QuestionSubmitQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionSubmitService_ServiceDesc is the grpc.ServiceDesc for QuestionSubmitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionSubmitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QuestionSubmitService",
	HandlerType: (*QuestionSubmitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoQuestionSubmit",
			Handler:    _QuestionSubmitService_DoQuestionSubmit_Handler,
		},
		{
			MethodName: "ListQuestionSubmitByPage",
			Handler:    _QuestionSubmitService_ListQuestionSubmitByPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "questionsubmit.proto",
}
