// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.9
// source: question.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuestionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                   // id
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`              // 标题
	Content     string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`          // 内容
	Tags        string `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`                // 标签列表（json 数组）
	Answer      string `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`            // 题目答案
	SubmitNum   int32  `protobuf:"varint,6,opt,name=submitNum,proto3" json:"submitNum,omitempty"`     // 题目提交数
	AcceptedNum int32  `protobuf:"varint,7,opt,name=acceptedNum,proto3" json:"acceptedNum,omitempty"` // 题目通过数
	JudgeCase   string `protobuf:"bytes,8,opt,name=judgeCase,proto3" json:"judgeCase,omitempty"`      // 判题用例（json 数组）
	JudgeConfig string `protobuf:"bytes,9,opt,name=judgeConfig,proto3" json:"judgeConfig,omitempty"`  // 判题配置（json 对象）
	ThumbNum    int32  `protobuf:"varint,10,opt,name=thumbNum,proto3" json:"thumbNum,omitempty"`      // 点赞数
	FavourNum   int32  `protobuf:"varint,11,opt,name=favourNum,proto3" json:"favourNum,omitempty"`    // 收藏数
	UserId      int64  `protobuf:"varint,12,opt,name=userId,proto3" json:"userId,omitempty"`          // 创建用户 id
	CreateTime  string `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`   // 创建时间
	UpdateTime  string `protobuf:"bytes,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`   // 更新时间
	IsDelete    int32  `protobuf:"varint,15,opt,name=isDelete,proto3" json:"isDelete,omitempty"`      // 是否删除
}

func (x *QuestionInfo) Reset() {
	*x = QuestionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionInfo) ProtoMessage() {}

func (x *QuestionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionInfo.ProtoReflect.Descriptor instead.
func (*QuestionInfo) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{0}
}

func (x *QuestionInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionInfo) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *QuestionInfo) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionInfo) GetSubmitNum() int32 {
	if x != nil {
		return x.SubmitNum
	}
	return 0
}

func (x *QuestionInfo) GetAcceptedNum() int32 {
	if x != nil {
		return x.AcceptedNum
	}
	return 0
}

func (x *QuestionInfo) GetJudgeCase() string {
	if x != nil {
		return x.JudgeCase
	}
	return ""
}

func (x *QuestionInfo) GetJudgeConfig() string {
	if x != nil {
		return x.JudgeConfig
	}
	return ""
}

func (x *QuestionInfo) GetThumbNum() int32 {
	if x != nil {
		return x.ThumbNum
	}
	return 0
}

func (x *QuestionInfo) GetFavourNum() int32 {
	if x != nil {
		return x.FavourNum
	}
	return 0
}

func (x *QuestionInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QuestionInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuestionInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QuestionInfo) GetIsDelete() int32 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

type QuestionVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                   // id
	Title       string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`              // 标题
	Content     string       `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`          // 内容
	Tags        []string     `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`                // 标签列表（json 数组）
	SubmitNum   int32        `protobuf:"varint,6,opt,name=submitNum,proto3" json:"submitNum,omitempty"`     // 题目提交数
	AcceptedNum int32        `protobuf:"varint,7,opt,name=acceptedNum,proto3" json:"acceptedNum,omitempty"` // 题目通过数
	JudgeConfig *JudgeConfig `protobuf:"bytes,9,opt,name=judgeConfig,proto3" json:"judgeConfig,omitempty"`  // 判题配置（json 对象）
	ThumbNum    int32        `protobuf:"varint,10,opt,name=thumbNum,proto3" json:"thumbNum,omitempty"`      // 点赞数
	FavourNum   int32        `protobuf:"varint,11,opt,name=favourNum,proto3" json:"favourNum,omitempty"`    // 收藏数
	UserId      int64        `protobuf:"varint,12,opt,name=userId,proto3" json:"userId,omitempty"`          // 创建用户 id
	CreateTime  string       `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`   // 创建时间
	UpdateTime  string       `protobuf:"bytes,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`   // 更新时间
	UserVo      *UserVo      `protobuf:"bytes,15,opt,name=userVo,proto3" json:"userVo,omitempty"`           //题目创建人的信息
}

func (x *QuestionVo) Reset() {
	*x = QuestionVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionVo) ProtoMessage() {}

func (x *QuestionVo) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionVo.ProtoReflect.Descriptor instead.
func (*QuestionVo) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{1}
}

func (x *QuestionVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionVo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionVo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuestionVo) GetSubmitNum() int32 {
	if x != nil {
		return x.SubmitNum
	}
	return 0
}

func (x *QuestionVo) GetAcceptedNum() int32 {
	if x != nil {
		return x.AcceptedNum
	}
	return 0
}

func (x *QuestionVo) GetJudgeConfig() *JudgeConfig {
	if x != nil {
		return x.JudgeConfig
	}
	return nil
}

func (x *QuestionVo) GetThumbNum() int32 {
	if x != nil {
		return x.ThumbNum
	}
	return 0
}

func (x *QuestionVo) GetFavourNum() int32 {
	if x != nil {
		return x.FavourNum
	}
	return 0
}

func (x *QuestionVo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QuestionVo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuestionVo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QuestionVo) GetUserVo() *UserVo {
	if x != nil {
		return x.UserVo
	}
	return nil
}

type JudgeCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs  string `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`   //用例输入
	Outputs string `protobuf:"bytes,2,opt,name=outputs,proto3" json:"outputs,omitempty"` //用例输出
}

func (x *JudgeCase) Reset() {
	*x = JudgeCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeCase) ProtoMessage() {}

func (x *JudgeCase) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeCase.ProtoReflect.Descriptor instead.
func (*JudgeCase) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{2}
}

func (x *JudgeCase) GetInputs() string {
	if x != nil {
		return x.Inputs
	}
	return ""
}

func (x *JudgeCase) GetOutputs() string {
	if x != nil {
		return x.Outputs
	}
	return ""
}

type JudgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeLimit   int64 `protobuf:"varint,1,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`     // 时间限制
	MemoryLimit int64 `protobuf:"varint,2,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"` //内存限制
	StackLimit  int64 `protobuf:"varint,3,opt,name=stackLimit,proto3" json:"stackLimit,omitempty"`   //堆栈限制
}

func (x *JudgeConfig) Reset() {
	*x = JudgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeConfig) ProtoMessage() {}

func (x *JudgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeConfig.ProtoReflect.Descriptor instead.
func (*JudgeConfig) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{3}
}

func (x *JudgeConfig) GetTimeLimit() int64 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *JudgeConfig) GetMemoryLimit() int64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *JudgeConfig) GetStackLimit() int64 {
	if x != nil {
		return x.StackLimit
	}
	return 0
}

type QuestionAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content     string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Tags        []string     `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Answer      string       `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
	JudgeCase   []*JudgeCase `protobuf:"bytes,5,rep,name=judgeCase,proto3" json:"judgeCase,omitempty"`
	JudgeConfig *JudgeConfig `protobuf:"bytes,6,opt,name=judgeConfig,proto3" json:"judgeConfig,omitempty"`
}

func (x *QuestionAddRequest) Reset() {
	*x = QuestionAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAddRequest) ProtoMessage() {}

func (x *QuestionAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAddRequest.ProtoReflect.Descriptor instead.
func (*QuestionAddRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{4}
}

func (x *QuestionAddRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionAddRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionAddRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuestionAddRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionAddRequest) GetJudgeCase() []*JudgeCase {
	if x != nil {
		return x.JudgeCase
	}
	return nil
}

func (x *QuestionAddRequest) GetJudgeConfig() *JudgeConfig {
	if x != nil {
		return x.JudgeConfig
	}
	return nil
}

type QuestionEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content     string       `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Tags        []string     `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Answer      string       `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	JudgeCase   []*JudgeCase `protobuf:"bytes,6,rep,name=judgeCase,proto3" json:"judgeCase,omitempty"`
	JudgeConfig *JudgeConfig `protobuf:"bytes,7,opt,name=judgeConfig,proto3" json:"judgeConfig,omitempty"`
}

func (x *QuestionEditRequest) Reset() {
	*x = QuestionEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionEditRequest) ProtoMessage() {}

func (x *QuestionEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionEditRequest.ProtoReflect.Descriptor instead.
func (*QuestionEditRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{5}
}

func (x *QuestionEditRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionEditRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionEditRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionEditRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuestionEditRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionEditRequest) GetJudgeCase() []*JudgeCase {
	if x != nil {
		return x.JudgeCase
	}
	return nil
}

func (x *QuestionEditRequest) GetJudgeConfig() *JudgeConfig {
	if x != nil {
		return x.JudgeConfig
	}
	return nil
}

type QuestionQueryRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title   string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Tags    []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Answer  string   `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	UserId  int64    `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *QuestionQueryRequests) Reset() {
	*x = QuestionQueryRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionQueryRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionQueryRequests) ProtoMessage() {}

func (x *QuestionQueryRequests) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionQueryRequests.ProtoReflect.Descriptor instead.
func (*QuestionQueryRequests) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{6}
}

func (x *QuestionQueryRequests) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionQueryRequests) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionQueryRequests) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionQueryRequests) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuestionQueryRequests) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionQueryRequests) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type QuestionUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content     string       `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Tags        []string     `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Answer      string       `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	JudgeCase   []*JudgeCase `protobuf:"bytes,6,rep,name=judgeCase,proto3" json:"judgeCase,omitempty"`
	JudgeConfig *JudgeConfig `protobuf:"bytes,7,opt,name=judgeConfig,proto3" json:"judgeConfig,omitempty"`
}

func (x *QuestionUpdateRequest) Reset() {
	*x = QuestionUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionUpdateRequest) ProtoMessage() {}

func (x *QuestionUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionUpdateRequest.ProtoReflect.Descriptor instead.
func (*QuestionUpdateRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{7}
}

func (x *QuestionUpdateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionUpdateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionUpdateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionUpdateRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuestionUpdateRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionUpdateRequest) GetJudgeCase() []*JudgeCase {
	if x != nil {
		return x.JudgeCase
	}
	return nil
}

func (x *QuestionUpdateRequest) GetJudgeConfig() *JudgeConfig {
	if x != nil {
		return x.JudgeConfig
	}
	return nil
}

type ValidQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionInfo *QuestionInfo `protobuf:"bytes,1,opt,name=questionInfo,proto3" json:"questionInfo,omitempty"`
	Add          bool          `protobuf:"varint,2,opt,name=add,proto3" json:"add,omitempty"`
}

func (x *ValidQuestionRequest) Reset() {
	*x = ValidQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidQuestionRequest) ProtoMessage() {}

func (x *ValidQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidQuestionRequest.ProtoReflect.Descriptor instead.
func (*ValidQuestionRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{8}
}

func (x *ValidQuestionRequest) GetQuestionInfo() *QuestionInfo {
	if x != nil {
		return x.QuestionInfo
	}
	return nil
}

func (x *ValidQuestionRequest) GetAdd() bool {
	if x != nil {
		return x.Add
	}
	return false
}

type GetQuestionVoPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     *Page         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Question *QuestionInfo `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *GetQuestionVoPageRequest) Reset() {
	*x = GetQuestionVoPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionVoPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionVoPageRequest) ProtoMessage() {}

func (x *GetQuestionVoPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionVoPageRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionVoPageRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{9}
}

func (x *GetQuestionVoPageRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetQuestionVoPageRequest) GetQuestion() *QuestionInfo {
	if x != nil {
		return x.Question
	}
	return nil
}

type GetQuestionPageVoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question []*QuestionInfo `protobuf:"bytes,1,rep,name=question,proto3" json:"question,omitempty"`
}

func (x *GetQuestionPageVoResponse) Reset() {
	*x = GetQuestionPageVoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionPageVoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionPageVoResponse) ProtoMessage() {}

func (x *GetQuestionPageVoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionPageVoResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionPageVoResponse) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{10}
}

func (x *GetQuestionPageVoResponse) GetQuestion() []*QuestionInfo {
	if x != nil {
		return x.Question
	}
	return nil
}

type QuestionIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuestionIdRequest) Reset() {
	*x = QuestionIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_question_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionIdRequest) ProtoMessage() {}

func (x *QuestionIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionIdRequest.ProtoReflect.Descriptor instead.
func (*QuestionIdRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{11}
}

func (x *QuestionIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_question_proto protoreflect.FileDescriptor

var file_question_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x03, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x4e, 0x75, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x0b, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x4e, 0x75,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x56, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6f, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x22, 0x3d, 0x0a, 0x09, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x09, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xdb, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x43, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x5b, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64, 0x64, 0x22,
	0x60, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x46, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x11, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x32, 0xcb,
	0x03, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x12, 0x0d, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x0b, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_question_proto_rawDescOnce sync.Once
	file_question_proto_rawDescData = file_question_proto_rawDesc
)

func file_question_proto_rawDescGZIP() []byte {
	file_question_proto_rawDescOnce.Do(func() {
		file_question_proto_rawDescData = protoimpl.X.CompressGZIP(file_question_proto_rawDescData)
	})
	return file_question_proto_rawDescData
}

var file_question_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_question_proto_goTypes = []interface{}{
	(*QuestionInfo)(nil),              // 0: QuestionInfo
	(*QuestionVo)(nil),                // 1: QuestionVo
	(*JudgeCase)(nil),                 // 2: JudgeCase
	(*JudgeConfig)(nil),               // 3: JudgeConfig
	(*QuestionAddRequest)(nil),        // 4: QuestionAddRequest
	(*QuestionEditRequest)(nil),       // 5: QuestionEditRequest
	(*QuestionQueryRequests)(nil),     // 6: QuestionQueryRequests
	(*QuestionUpdateRequest)(nil),     // 7: QuestionUpdateRequest
	(*ValidQuestionRequest)(nil),      // 8: ValidQuestionRequest
	(*GetQuestionVoPageRequest)(nil),  // 9: GetQuestionVoPageRequest
	(*GetQuestionPageVoResponse)(nil), // 10: GetQuestionPageVoResponse
	(*QuestionIdRequest)(nil),         // 11: QuestionIdRequest
	(*UserVo)(nil),                    // 12: UserVo
	(*Page)(nil),                      // 13: Page
	(*Empty)(nil),                     // 14: Empty
	(*BoolResponse)(nil),              // 15: BoolResponse
}
var file_question_proto_depIdxs = []int32{
	3,  // 0: QuestionVo.judgeConfig:type_name -> JudgeConfig
	12, // 1: QuestionVo.userVo:type_name -> UserVo
	2,  // 2: QuestionAddRequest.judgeCase:type_name -> JudgeCase
	3,  // 3: QuestionAddRequest.judgeConfig:type_name -> JudgeConfig
	2,  // 4: QuestionEditRequest.judgeCase:type_name -> JudgeCase
	3,  // 5: QuestionEditRequest.judgeConfig:type_name -> JudgeConfig
	2,  // 6: QuestionUpdateRequest.judgeCase:type_name -> JudgeCase
	3,  // 7: QuestionUpdateRequest.judgeConfig:type_name -> JudgeConfig
	0,  // 8: ValidQuestionRequest.questionInfo:type_name -> QuestionInfo
	13, // 9: GetQuestionVoPageRequest.page:type_name -> Page
	0,  // 10: GetQuestionVoPageRequest.question:type_name -> QuestionInfo
	0,  // 11: GetQuestionPageVoResponse.question:type_name -> QuestionInfo
	8,  // 12: QuestionService.ValidQuestion:input_type -> ValidQuestionRequest
	9,  // 13: QuestionService.GetQuestionVoPage:input_type -> GetQuestionVoPageRequest
	4,  // 14: QuestionService.AddQuestion:input_type -> QuestionAddRequest
	11, // 15: QuestionService.GetQuestionVoById:input_type -> QuestionIdRequest
	11, // 16: QuestionService.GetQuestionById:input_type -> QuestionIdRequest
	11, // 17: QuestionService.DeleteQuestionById:input_type -> QuestionIdRequest
	11, // 18: QuestionService.UpdateQuestionById:input_type -> QuestionIdRequest
	0,  // 19: QuestionService.GetQuestionVo:input_type -> QuestionInfo
	14, // 20: QuestionService.ValidQuestion:output_type -> Empty
	10, // 21: QuestionService.GetQuestionVoPage:output_type -> GetQuestionPageVoResponse
	15, // 22: QuestionService.AddQuestion:output_type -> BoolResponse
	1,  // 23: QuestionService.GetQuestionVoById:output_type -> QuestionVo
	0,  // 24: QuestionService.GetQuestionById:output_type -> QuestionInfo
	15, // 25: QuestionService.DeleteQuestionById:output_type -> BoolResponse
	15, // 26: QuestionService.UpdateQuestionById:output_type -> BoolResponse
	1,  // 27: QuestionService.GetQuestionVo:output_type -> QuestionVo
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_question_proto_init() }
func file_question_proto_init() {
	if File_question_proto != nil {
		return
	}
	file_common_proto_init()
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_question_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionQueryRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionVoPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionPageVoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_question_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_question_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_question_proto_goTypes,
		DependencyIndexes: file_question_proto_depIdxs,
		MessageInfos:      file_question_proto_msgTypes,
	}.Build()
	File_question_proto = out.File
	file_question_proto_rawDesc = nil
	file_question_proto_goTypes = nil
	file_question_proto_depIdxs = nil
}
